beginGuildPrune	dimscord/restapi/guild.html#beginGuildPrune,RestApi,string,int,string	guild: beginGuildPrune(api: RestApi; guild_id: string; days = 7;\n                compute_prune_count = true; reason = &quot;&quot;): owned(Future[void])	
getGuildPruneCount	dimscord/restapi/guild.html#getGuildPruneCount,RestApi,string,int	guild: getGuildPruneCount(api: RestApi; guild_id: string; days: int): Future[int]	
deleteGuild	dimscord/restapi/guild.html#deleteGuild,RestApi,string	guild: deleteGuild(api: RestApi; guild_id: string): owned(Future[void])	
editGuild	dimscord/restapi/guild.html#editGuild,RestApi,string,string	guild: editGuild(api: RestApi; guild_id: string;\n          name, region, afk_channel_id, icon = none string;\n          discovery_splash, owner_id, splash, banner = none string;\n          system_channel_id, rules_channel_id = none string;\n          preferred_locale, public_updates_channel_id = none string;\n          verification_level, default_message_notifications = none int;\n          explicit_content_filter, afk_timeout = none int; reason = &quot;&quot;): Future[\n    Guild]	
createGuild	dimscord/restapi/guild.html#createGuild,RestApi	guild: createGuild(api: RestApi; name, region = none string;\n            icon, afk_channel_id, system_channel_id = none string;\n            verification_level, default_message_notifications = none int;\n            afk_timeout, explicit_content_filter = none int;\n            roles = none seq[Role]; channels = none seq[Channel]): Future[Guild]	
getGuild	dimscord/restapi/guild.html#getGuild,RestApi,string	guild: getGuild(api: RestApi; guild_id: string; with_counts = false): Future[Guild]	
getGuildAuditLogs	dimscord/restapi/guild.html#getGuildAuditLogs,RestApi,string,string,string,int	guild: getGuildAuditLogs(api: RestApi; guild_id: string; user_id, before = &quot;&quot;;\n                  action_type = -1; limit = 50): Future[AuditLog]	
getGuildRoles	dimscord/restapi/guild.html#getGuildRoles,RestApi,string	guild: getGuildRoles(api: RestApi; guild_id: string): Future[seq[Role]]	
createGuildRole	dimscord/restapi/guild.html#createGuildRole,RestApi,string,string,PermObj,int,string	guild: createGuildRole(api: RestApi; guild_id: string; name = &quot;new role&quot;;\n                hoist, mentionable = false; permissions: PermObj; color = 0;\n                reason = &quot;&quot;): Future[Role]	
deleteGuildRole	dimscord/restapi/guild.html#deleteGuildRole,RestApi,string,string	guild: deleteGuildRole(api: RestApi; guild_id, role_id: string): owned(Future[void])	
editGuildRole	dimscord/restapi/guild.html#editGuildRole,RestApi,string,string,string	guild: editGuildRole(api: RestApi; guild_id, role_id: string; name = none string;\n              permissions = none PermObj; color = none int;\n              hoist, mentionable = none bool; reason = &quot;&quot;): Future[Role]	
editGuildRolePosition	dimscord/restapi/guild.html#editGuildRolePosition,RestApi,string,string,string	guild: editGuildRolePosition(api: RestApi; guild_id, role_id: string;\n                      position = none int; reason = &quot;&quot;): Future[seq[Role]]	
getGuildInvites	dimscord/restapi/guild.html#getGuildInvites,RestApi,string	guild: getGuildInvites(api: RestApi; guild_id: string): Future[seq[InviteMetadata]]	
getGuildVanityUrl	dimscord/restapi/guild.html#getGuildVanityUrl,RestApi,string	guild: getGuildVanityUrl(api: RestApi; guild_id: string): Future[\n    tuple[code: Option[string], uses: int]]	
editGuildMember	dimscord/restapi/guild.html#editGuildMember,RestApi,string,string,string	guild: editGuildMember(api: RestApi; guild_id, user_id: string;\n                nick, channel_id = none string; roles = none seq[string];\n                mute, deaf = none bool; reason = &quot;&quot;): owned(Future[void])	
removeGuildMember	dimscord/restapi/guild.html#removeGuildMember,RestApi,string,string,string	guild: removeGuildMember(api: RestApi; guild_id, user_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getGuildBan	dimscord/restapi/guild.html#getGuildBan,RestApi,string,string	guild: getGuildBan(api: RestApi; guild_id, user_id: string): Future[GuildBan]	
getGuildBans	dimscord/restapi/guild.html#getGuildBans,RestApi,string	guild: getGuildBans(api: RestApi; guild_id: string): Future[seq[GuildBan]]	
createGuildBan	dimscord/restapi/guild.html#createGuildBan,RestApi,string,string,int,string	guild: createGuildBan(api: RestApi; guild_id, user_id: string; deletemsgdays = 0;\n               reason = &quot;&quot;): owned(Future[void])	
removeGuildBan	dimscord/restapi/guild.html#removeGuildBan,RestApi,string,string,string	guild: removeGuildBan(api: RestApi; guild_id, user_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getGuildIntegrations	dimscord/restapi/guild.html#getGuildIntegrations,RestApi,string	guild: getGuildIntegrations(api: RestApi; guild_id: string): Future[seq[Integration]]	
getGuildWebhooks	dimscord/restapi/guild.html#getGuildWebhooks,RestApi,string	guild: getGuildWebhooks(api: RestApi; guild_id: string): Future[seq[Webhook]]	
syncGuildIntegration	dimscord/restapi/guild.html#syncGuildIntegration,RestApi,string,string	guild: syncGuildIntegration(api: RestApi; guild_id, integ_id: string): owned(\n    Future[void])	
editGuildIntegration	dimscord/restapi/guild.html#editGuildIntegration,RestApi,string,string,string	guild: editGuildIntegration(api: RestApi; guild_id, integ_id: string;\n                     expire_behavior, expire_grace_period = none int;\n                     enable_emoticons = none bool; reason = &quot;&quot;): owned(\n    Future[void])	
deleteGuildIntegration	dimscord/restapi/guild.html#deleteGuildIntegration,RestApi,string,string	guild: deleteGuildIntegration(api: RestApi; integ_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getGuildWidget	dimscord/restapi/guild.html#getGuildWidget,RestApi,string	guild: getGuildWidget(api: RestApi; guild_id: string): Future[\n    tuple[enabled: bool, channel_id: Option[string]]]	
editGuildWidget	dimscord/restapi/guild.html#editGuildWidget,RestApi,string	guild: editGuildWidget(api: RestApi; guild_id: string; enabled = none bool;\n                channel_id = none string): Future[\n    tuple[enabled: bool, channel_id: Option[string]]]	
getGuildPreview	dimscord/restapi/guild.html#getGuildPreview,RestApi,string	guild: getGuildPreview(api: RestApi; guild_id: string): Future[GuildPreview]	
addGuildMember	dimscord/restapi/guild.html#addGuildMember,RestApi,string,string,string,string	guild: addGuildMember(api: RestApi; guild_id, user_id, access_token: string;\n               nick = none string; roles = none seq[string];\n               mute, deaf = none bool; reason = &quot;&quot;): Future[\n    tuple[member: Member, exists: bool]]	
createGuildEmoji	dimscord/restapi/guild.html#createGuildEmoji,RestApi,string,string,string,seq[string],string	guild: createGuildEmoji(api: RestApi; guild_id, name, image: string;\n                 roles: seq[string] = @[]; reason = &quot;&quot;): Future[Emoji]	
editGuildEmoji	dimscord/restapi/guild.html#editGuildEmoji,RestApi,string,string,string	guild: editGuildEmoji(api: RestApi; guild_id, emoji_id: string; name = none string;\n               roles = none seq[string]; reason = &quot;&quot;): Future[Emoji]	
deleteGuildEmoji	dimscord/restapi/guild.html#deleteGuildEmoji,RestApi,string,string,string	guild: deleteGuildEmoji(api: RestApi; guild_id, emoji_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getGuildVoiceRegions	dimscord/restapi/guild.html#getGuildVoiceRegions,RestApi,string	guild: getGuildVoiceRegions(api: RestApi; guild_id: string): Future[seq[VoiceRegion]]	
getVoiceRegions	dimscord/restapi/guild.html#getVoiceRegions,RestApi	guild: getVoiceRegions(api: RestApi): Future[seq[VoiceRegion]]	
