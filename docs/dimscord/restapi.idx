RestError	dimscord/restapi.html#RestError	restapi: RestError	
DiscordFile	dimscord/restapi.html#DiscordFile	restapi: DiscordFile	
AllowedMentions	dimscord/restapi.html#AllowedMentions	restapi: AllowedMentions	
sendMessage	dimscord/restapi.html#sendMessage,RestApi,string,string	restapi: sendMessage(api: RestApi; channel_id: string; content = &quot;&quot;; tts = false;\n            embed = none Embed; allowed_mentions = none AllowedMentions;\n            nonce: Option[string] or Option[int] = none(int);\n            files = none seq[DiscordFile]): Future[Message]	
editMessage	dimscord/restapi.html#editMessage,RestApi,string,string,string	restapi: editMessage(api: RestApi; channel_id, message_id: string; content = &quot;&quot;;\n            tts = false; flags = none(int); embed = none Embed): Future[Message]	
deleteMessage	dimscord/restapi.html#deleteMessage,RestApi,string,string,string	restapi: deleteMessage(api: RestApi; channel_id, message_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getChannelMessages	dimscord/restapi.html#getChannelMessages,RestApi,string,string,string,string,int	restapi: getChannelMessages(api: RestApi; channel_id: string; around, before, after = &quot;&quot;;\n                   limit = 50): Future[seq[Message]]	
getChannelMessage	dimscord/restapi.html#getChannelMessage,RestApi,string,string	restapi: getChannelMessage(api: RestApi; channel_id, message_id: string): Future[Message]	
bulkDeleteMessages	dimscord/restapi.html#bulkDeleteMessages,RestApi,string,seq[string],string	restapi: bulkDeleteMessages(api: RestApi; channel_id: string; message_ids: seq[string];\n                   reason = &quot;&quot;): owned(Future[void])	
addMessageReaction	dimscord/restapi.html#addMessageReaction,RestApi,string,string,string	restapi: addMessageReaction(api: RestApi; channel_id, message_id, emoji: string): owned(\n    Future[void])	
deleteMessageReaction	dimscord/restapi.html#deleteMessageReaction,RestApi,string,string,string,string	restapi: deleteMessageReaction(api: RestApi; channel_id, message_id, emoji: string;\n                      user_id = &quot;@me&quot;): owned(Future[void])	
deleteMessageReactionEmoji	dimscord/restapi.html#deleteMessageReactionEmoji,RestApi,string,string,string	restapi: deleteMessageReactionEmoji(api: RestApi; channel_id, message_id, emoji: string): owned(\n    Future[void])	
getMessageReactions	dimscord/restapi.html#getMessageReactions,RestApi,string,string,string,string,string,int	restapi: getMessageReactions(api: RestApi; channel_id, message_id, emoji: string;\n                    before, after = &quot;&quot;; limit = 25): Future[seq[User]]	
deleteAllMessageReactions	dimscord/restapi.html#deleteAllMessageReactions,RestApi,string,string	restapi: deleteAllMessageReactions(api: RestApi; channel_id, message_id: string): owned(\n    Future[void])	
triggerTypingIndicator	dimscord/restapi.html#triggerTypingIndicator,RestApi,string	restapi: triggerTypingIndicator(api: RestApi; channel_id: string): owned(Future[void])	
addChannelMessagePin	dimscord/restapi.html#addChannelMessagePin,RestApi,string,string,string	restapi: addChannelMessagePin(api: RestApi; channel_id, message_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
deleteChannelMessagePin	dimscord/restapi.html#deleteChannelMessagePin,RestApi,string,string,string	restapi: deleteChannelMessagePin(api: RestApi; channel_id, message_id: string;\n                        reason = &quot;&quot;): owned(Future[void])	
getChannelPins	dimscord/restapi.html#getChannelPins,RestApi,string	restapi: getChannelPins(api: RestApi; channel_id: string): Future[seq[Message]]	
editGuildChannel	dimscord/restapi.html#editGuildChannel,RestApi,string,string	restapi: editGuildChannel(api: RestApi; channel_id: string;\n                 name, parent_id, topic = none string;\n                 rate_limit_per_user, bitrate = none int;\n                 position, user_limit = none int;\n                 permission_overwrites = none seq[Overwrite]; nsfw = none bool;\n                 reason = &quot;&quot;): Future[GuildChannel]	
createGuildChannel	dimscord/restapi.html#createGuildChannel,RestApi,string,string,int,string	restapi: createGuildChannel(api: RestApi; guild_id, name: string; kind = 0;\n                   parent_id, topic = none string; nsfw = none bool;\n    rate_limit_per_user, bitrate, position, user_limit = none int;\n                   permission_overwrites = none seq[Overwrite]; reason = &quot;&quot;): Future[\n    GuildChannel]	
deleteChannel	dimscord/restapi.html#deleteChannel,RestApi,string,string	restapi: deleteChannel(api: RestApi; channel_id: string; reason = &quot;&quot;): owned(Future[void])	
editGuildChannelPermissions	dimscord/restapi.html#editGuildChannelPermissions,RestApi,,,,PermObj,string	restapi: editGuildChannelPermissions(api: RestApi;\n                            channel_id, perm_id, kind: string or int;\n                            perms: PermObj; reason = &quot;&quot;): owned(Future[void])	
getInvite	dimscord/restapi.html#getInvite,RestApi,string	restapi: getInvite(api: RestApi; code: string; with_counts, auth = false): Future[Invite]	
beginGuildPrune	dimscord/restapi.html#beginGuildPrune,RestApi,string,int,string	restapi: beginGuildPrune(api: RestApi; guild_id: string; days = 7;\n                compute_prune_count = true; reason = &quot;&quot;): owned(Future[void])	
getGuildPruneCount	dimscord/restapi.html#getGuildPruneCount,RestApi,string,int	restapi: getGuildPruneCount(api: RestApi; guild_id: string; days: int): Future[int]	
deleteGuild	dimscord/restapi.html#deleteGuild,RestApi,string	restapi: deleteGuild(api: RestApi; guild_id: string): owned(Future[void])	
editGuild	dimscord/restapi.html#editGuild,RestApi,string,string	restapi: editGuild(api: RestApi; guild_id: string;\n          name, region, afk_channel_id, icon = none string;\n          discovery_splash, owner_id, splash, banner = none string;\n          system_channel_id, rules_channel_id = none string;\n          preferred_locale, public_updates_channel_id = none string;\n          verification_level, default_message_notifications = none int;\n          explicit_content_filter, afk_timeout = none int; reason = &quot;&quot;): Future[\n    Guild]	
createGuild	dimscord/restapi.html#createGuild,RestApi	restapi: createGuild(api: RestApi; name, region = none string;\n            icon, afk_channel_id, system_channel_id = none string;\n            verification_level, default_message_notifications = none int;\n            afk_timeout, explicit_content_filter = none int;\n            roles = none seq[Role]; channels = none seq[Channel]): Future[Guild]	
getGuild	dimscord/restapi.html#getGuild,RestApi,string	restapi: getGuild(api: RestApi; guild_id: string; with_counts = false): Future[Guild]	
getGuildAuditLogs	dimscord/restapi.html#getGuildAuditLogs,RestApi,string,string,string,int	restapi: getGuildAuditLogs(api: RestApi; guild_id: string; user_id, before = &quot;&quot;;\n                  action_type = -1; limit = 50): Future[AuditLog]	
getGuildRoles	dimscord/restapi.html#getGuildRoles,RestApi,string	restapi: getGuildRoles(api: RestApi; guild_id: string): Future[seq[Role]]	
createGuildRole	dimscord/restapi.html#createGuildRole,RestApi,string,string,PermObj,int,string	restapi: createGuildRole(api: RestApi; guild_id: string; name = &quot;new role&quot;;\n                hoist, mentionable = false; permissions: PermObj; color = 0;\n                reason = &quot;&quot;): Future[Role]	
deleteGuildRole	dimscord/restapi.html#deleteGuildRole,RestApi,string,string	restapi: deleteGuildRole(api: RestApi; guild_id, role_id: string): owned(Future[void])	
editGuildRole	dimscord/restapi.html#editGuildRole,RestApi,string,string,string	restapi: editGuildRole(api: RestApi; guild_id, role_id: string; name = none string;\n              permissions = none PermObj; color = none int;\n              hoist, mentionable = none bool; reason = &quot;&quot;): Future[Role]	
editGuildRolePosition	dimscord/restapi.html#editGuildRolePosition,RestApi,string,string,string	restapi: editGuildRolePosition(api: RestApi; guild_id, role_id: string;\n                      position = none int; reason = &quot;&quot;): Future[seq[Role]]	
getGuildInvites	dimscord/restapi.html#getGuildInvites,RestApi,string	restapi: getGuildInvites(api: RestApi; guild_id: string): Future[seq[InviteMetadata]]	
getGuildVanityUrl	dimscord/restapi.html#getGuildVanityUrl,RestApi,string	restapi: getGuildVanityUrl(api: RestApi; guild_id: string): Future[\n    tuple[code: Option[string], uses: int]]	
editGuildMember	dimscord/restapi.html#editGuildMember,RestApi,string,string,string	restapi: editGuildMember(api: RestApi; guild_id, user_id: string;\n                nick, channel_id = none string; roles = none seq[string];\n                mute, deaf = none bool; reason = &quot;&quot;): owned(Future[void])	
removeGuildMember	dimscord/restapi.html#removeGuildMember,RestApi,string,string,string	restapi: removeGuildMember(api: RestApi; guild_id, user_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getGuildBan	dimscord/restapi.html#getGuildBan,RestApi,string,string	restapi: getGuildBan(api: RestApi; guild_id, user_id: string): Future[GuildBan]	
getGuildBans	dimscord/restapi.html#getGuildBans,RestApi,string	restapi: getGuildBans(api: RestApi; guild_id: string): Future[seq[GuildBan]]	
createGuildBan	dimscord/restapi.html#createGuildBan,RestApi,string,string,int,string	restapi: createGuildBan(api: RestApi; guild_id, user_id: string; deletemsgdays = 0;\n               reason = &quot;&quot;): owned(Future[void])	
removeGuildBan	dimscord/restapi.html#removeGuildBan,RestApi,string,string,string	restapi: removeGuildBan(api: RestApi; guild_id, user_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getGuildChannel	dimscord/restapi.html#getGuildChannel,RestApi,string,string	restapi: getGuildChannel(api: RestApi; guild_id, channel_id: string): Future[GuildChannel]	
getGuildChannels	dimscord/restapi.html#getGuildChannels,RestApi,string	restapi: getGuildChannels(api: RestApi; guild_id: string): Future[seq[GuildChannel]]	
editGuildChannelPositions	dimscord/restapi.html#editGuildChannelPositions,RestApi,string,string,string	restapi: editGuildChannelPositions(api: RestApi; guild_id, channel_id: string;\n                          position = none int; reason = &quot;&quot;): owned(Future[void])	
getGuildMember	dimscord/restapi.html#getGuildMember,RestApi,string,string	restapi: getGuildMember(api: RestApi; guild_id, user_id: string): Future[Member]	
getGuildMembers	dimscord/restapi.html#getGuildMembers,RestApi,string,int,string	restapi: getGuildMembers(api: RestApi; guild_id: string; limit = 1; after = &quot;0&quot;): Future[\n    seq[Member]]	
setGuildNick	dimscord/restapi.html#setGuildNick,RestApi,string,string,string	restapi: setGuildNick(api: RestApi; guild_id: string; nick, reason = &quot;&quot;): owned(\n    Future[void])	
addGuildMemberRole	dimscord/restapi.html#addGuildMemberRole,RestApi,string,string,string,string	restapi: addGuildMemberRole(api: RestApi; guild_id, user_id, role_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
removeGuildMemberRole	dimscord/restapi.html#removeGuildMemberRole,RestApi,string,string,string,string	restapi: removeGuildMemberRole(api: RestApi; guild_id, user_id, role_id: string;\n                      reason = &quot;&quot;): owned(Future[void])	
createChannelInvite	dimscord/restapi.html#createChannelInvite,RestApi,string,int,int,string	restapi: createChannelInvite(api: RestApi; channel_id: string; max_age = 86400;\n                    max_uses = 0; temp, unique = false;\n                    target_user = none string; target_user_type = none int;\n                    reason = &quot;&quot;): Future[Invite]	
deleteGuildChannelPermission	dimscord/restapi.html#deleteGuildChannelPermission,RestApi,string,string,string	restapi: deleteGuildChannelPermission(api: RestApi; channel_id, overwrite: string;\n                             reason = &quot;&quot;): owned(Future[void])	
deleteInvite	dimscord/restapi.html#deleteInvite,RestApi,string,string	restapi: deleteInvite(api: RestApi; code: string; reason = &quot;&quot;): owned(Future[void])	
getChannelInvites	dimscord/restapi.html#getChannelInvites,RestApi,string	restapi: getChannelInvites(api: RestApi; channel_id: string): Future[seq[Invite]]	
getGuildIntegrations	dimscord/restapi.html#getGuildIntegrations,RestApi,string	restapi: getGuildIntegrations(api: RestApi; guild_id: string): Future[seq[Integration]]	
getChannelWebhooks	dimscord/restapi.html#getChannelWebhooks,RestApi,string	restapi: getChannelWebhooks(api: RestApi; channel_id: string): Future[seq[Webhook]]	
getGuildWebhooks	dimscord/restapi.html#getGuildWebhooks,RestApi,string	restapi: getGuildWebhooks(api: RestApi; guild_id: string): Future[seq[Webhook]]	
createWebhook	dimscord/restapi.html#createWebhook,RestApi,string,string,string	restapi: createWebhook(api: RestApi; channel_id, username: string; avatar = none string;\n              reason = &quot;&quot;): Future[Webhook]	
executeWebhook	dimscord/restapi.html#executeWebhook,RestApi,string,string,string	restapi: executeWebhook(api: RestApi; webhook_id, token: string; wait = true;\n               content = &quot;&quot;; tts = false; file = none DiscordFile;\n               embeds = none seq[Embed];\n               allowed_mentions = none AllowedMentions;\n               username, avatar_url = none string): Future[Message]	
executeSlackWebhook	dimscord/restapi.html#executeSlackWebhook,RestApi,string,string	restapi: executeSlackWebhook(api: RestApi; webhook_id, token: string; wait = true): Future[\n    Message]	
executeGithubWebhook	dimscord/restapi.html#executeGithubWebhook,RestApi,string,string	restapi: executeGithubWebhook(api: RestApi; webhook_id, token: string; wait = true): Future[\n    Message]	
getWebhook	dimscord/restapi.html#getWebhook,RestApi,string	restapi: getWebhook(api: RestApi; webhook_id: string): Future[Webhook]	
deleteWebhook	dimscord/restapi.html#deleteWebhook,RestApi,string,string	restapi: deleteWebhook(api: RestApi; webhook_id: string; reason = &quot;&quot;): owned(Future[void])	
editWebhook	dimscord/restapi.html#editWebhook,RestApi,string,string	restapi: editWebhook(api: RestApi; webhook_id: string;\n            name, avatar, channel_id = none string; reason = &quot;&quot;): owned(\n    Future[void])	
syncGuildIntegration	dimscord/restapi.html#syncGuildIntegration,RestApi,string,string	restapi: syncGuildIntegration(api: RestApi; guild_id, integ_id: string): owned(\n    Future[void])	
editGuildIntegration	dimscord/restapi.html#editGuildIntegration,RestApi,string,string,string	restapi: editGuildIntegration(api: RestApi; guild_id, integ_id: string;\n                     expire_behavior, expire_grace_period = none int;\n                     enable_emoticons = none bool; reason = &quot;&quot;): owned(\n    Future[void])	
deleteGuildIntegration	dimscord/restapi.html#deleteGuildIntegration,RestApi,string,string	restapi: deleteGuildIntegration(api: RestApi; integ_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getGuildWidget	dimscord/restapi.html#getGuildWidget,RestApi,string	restapi: getGuildWidget(api: RestApi; guild_id: string): Future[\n    tuple[enabled: bool, channel_id: Option[string]]]	
editGuildWidget	dimscord/restapi.html#editGuildWidget,RestApi,string	restapi: editGuildWidget(api: RestApi; guild_id: string; enabled = none bool;\n                channel_id = none string): Future[\n    tuple[enabled: bool, channel_id: Option[string]]]	
getGuildPreview	dimscord/restapi.html#getGuildPreview,RestApi,string	restapi: getGuildPreview(api: RestApi; guild_id: string): Future[GuildPreview]	
addGuildMember	dimscord/restapi.html#addGuildMember,RestApi,string,string,string,string	restapi: addGuildMember(api: RestApi; guild_id, user_id, access_token: string;\n               nick = none string; roles = none seq[string];\n               mute, deaf = none bool; reason = &quot;&quot;): Future[\n    tuple[member: Member, exists: bool]]	
createGuildEmoji	dimscord/restapi.html#createGuildEmoji,RestApi,string,string,string,seq[string],string	restapi: createGuildEmoji(api: RestApi; guild_id, name, image: string;\n                 roles: seq[string] = @[]; reason = &quot;&quot;): Future[Emoji]	
editGuildEmoji	dimscord/restapi.html#editGuildEmoji,RestApi,string,string,string	restapi: editGuildEmoji(api: RestApi; guild_id, emoji_id: string; name = none string;\n               roles = none seq[string]; reason = &quot;&quot;): Future[Emoji]	
deleteGuildEmoji	dimscord/restapi.html#deleteGuildEmoji,RestApi,string,string,string	restapi: deleteGuildEmoji(api: RestApi; guild_id, emoji_id: string; reason = &quot;&quot;): owned(\n    Future[void])	
getUser	dimscord/restapi.html#getUser,RestApi,string	restapi: getUser(api: RestApi; user_id: string): Future[User]	
leaveGuild	dimscord/restapi.html#leaveGuild,RestApi,string	restapi: leaveGuild(api: RestApi; guild_id: string): owned(Future[void])	
createUserDm	dimscord/restapi.html#createUserDm,RestApi,string	restapi: createUserDm(api: RestApi; user_id: string): Future[DMChannel]	
getGuildVoiceRegions	dimscord/restapi.html#getGuildVoiceRegions,RestApi,string	restapi: getGuildVoiceRegions(api: RestApi; guild_id: string): Future[seq[VoiceRegion]]	
getVoiceRegions	dimscord/restapi.html#getVoiceRegions,RestApi	restapi: getVoiceRegions(api: RestApi): Future[seq[VoiceRegion]]	
getCurrentUser	dimscord/restapi.html#getCurrentUser,RestApi	restapi: getCurrentUser(api: RestApi): Future[User]	
getGatewayBot	dimscord/restapi.html#getGatewayBot,RestApi	restapi: getGatewayBot(api: RestApi): Future[GatewayBot]	
getGateway	dimscord/restapi.html#getGateway,RestApi	restapi: getGateway(api: RestApi): Future[string]	
editCurrentUser	dimscord/restapi.html#editCurrentUser,RestApi	restapi: editCurrentUser(api: RestApi; username, avatar = none string): Future[User]	
createGroupDm	dimscord/restapi.html#createGroupDm,RestApi,seq[string],Table[string,string]	restapi: createGroupDm(api: RestApi; access_tokens: seq[string];\n              nicks: Table[string, string]): Future[DMChannel]	
getCurrentApplication	dimscord/restapi.html#getCurrentApplication,RestApi	restapi: getCurrentApplication(api: RestApi): Future[OAuth2Application]	
